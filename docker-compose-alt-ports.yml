version: '3'

services:
  # Frontend - React application
  frontend:
    build:
      context: ./frontend
    ports:
      - "8080:80"  # Changed from 80:80 to avoid port conflict
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network

  # Backend - FastAPI application
  backend:
    build:
      context: ./backend
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
      - minio
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/app
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_URL=minio:9000
      - REDIS_URL=redis://redis:6379/0
    restart: unless-stopped
    networks:
      - app-network

  # Worker - Celery worker for background tasks
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    depends_on:
      - backend
      - redis
      - minio
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/app
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_URL=minio:9000
      - REDIS_URL=redis://redis:6379/0
    restart: unless-stopped
    networks:
      - app-network

  # Database - PostgreSQL
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=app
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - app-network

  # Redis - for Celery task queue
  redis:
    image: redis:6
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - app-network

  # MinIO - for object storage (images, models)
  minio:
    image: minio/minio
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - app-network

  # MinIO initialization - creates buckets
  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/images;
      /usr/bin/mc mb myminio/models;
      /usr/bin/mc mb myminio/datasets;
      /usr/bin/mc policy set public myminio/images;
      exit 0;
      "
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
